var documenterSearchIndex = {"docs":
[{"location":"installation.html#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"From Julia, PowerModelsITD is installed using the built-in package manager:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.add(\"PowerModelsITD\")","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Or, within the Julia REPL:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"]add PowerModelsITD","category":"page"},{"location":"installation.html#Installing-an-Optimizer","page":"Installation Guide","title":"Installing an Optimizer","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"PowerModelsITD depends on optimizers to solve Optimization problems, e.g., solve_opfitd. The table below lists the optimizer packages that have been tested with PowerModelsITD, and have been found to work by the team; this list is not exhaustive, there are probably more optimizers that will work.","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Install an optimizer using the Julia Package Manager, e.g.,","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.add(\"Ipopt\")","category":"page"},{"location":"installation.html#Known-Working-Optimizers","page":"Installation Guide","title":"Known Working Optimizers","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"The table below contains a truncated list of optimizers from the JuMP documentation that have been used by the development team and are confirmed to work with our package. There may be other Optimizers that work, and the Optimizers listed below are not guaranteed to work with all problems; they must be selected for the appropriate problems.","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Solver Julia Package Installation License Supports\nArtelys Knitro KNITRO.jl Manual Comm. (MI)LP, (MI)SOCP, (MI)NLP\nCbc Cbc.jl  EPL (MI)LP\nCPLEX CPLEX.jl Manual Comm. (MI)LP, (MI)SOCP\nGurobi Gurobi.jl Manual Comm. (MI)LP, (MI)SOCP\nIpopt Ipopt.jl  EPL LP, QP, NLP\nJuniper.jl Juniper.jl  MIT (MI)SOCP, (MI)NLP\nSCS SCS.jl  MIT LP, SOCP, SDP","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Where:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"LP = Linear programming\nQP = Quadratic programming\nSOCP = Second-order conic programming (including problems with convex quadratic constraints and/or objective)\nNLP = Nonlinear programming\nSDP = Semidefinite programming\n(MI)XXX = Mixed-integer equivalent of problem type XXX","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"For a complete list of JuMP supported optimizers, see JuMP Documentation.","category":"page"},{"location":"installation.html#Unsatisfiable-requirements-detected","page":"Installation Guide","title":"Unsatisfiable requirements detected","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Did you get an error like Unsatisfiable requirements detected for package D [756980fe]:?","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"The Pkg documentation has a section on how to understand and manage these conflicts.","category":"page"},{"location":"developer/style.html#Style-Conventions","page":"Style Guide","title":"Style Conventions","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"In general, the following conventions should be adhered to when making changes or additions to the code base. These conventions should include any conventions applied across the InfrastructureModels ecosystem specific to power engineering (i.e conventions from InfrastructureModels, PowerModels, PowerModelsDistribution, etc.) with some additions specific to PowerModelsITD.","category":"page"},{"location":"developer/style.html#Functions","page":"Style Guide","title":"Functions","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Function additions should meeting the following criteria:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All functions should be clearly named, without abbreviations, and with underscores between words, e.g. parse_files or constraint_boundary_voltage_angle; in Python this is known as lower_case_with_underscores. The exception to the abbreviate rule is cases where abbreviations would be expected in the modeling of power systems.\nAll functions that are not prepended by an underscore _ will be exported by default (i.e. when a user uses using PowerModelsITD). Public functions should have a detailed docstring instructing on usage\nAll functions that modify data in place should end with an exclamation point ! and the function input that is being modified should be the first argument (or first arguments in the case where multiple inputs are being modified in place). The exceptions to this rule are constraint and variable creation functions (i.e. those functions related to JuMP model creation), which do not include the exclaimation point\nAll function arguments, including keyword arguments, should have their types specified.\nPrivate functions, i.e. those intended to be for internal use only, should follow the same descriptive naming conventions as functions exported by default, and should always include docstrings to describe their purpose.\nFunctions should be separated by two blank lines","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"\"this function demonstrates how an internal, in-place data altering function should be defined\"\nfunction _concise_descriptive_name!(data::Dict{String,<:Any}, a::Real, b::Vector{<:Real}, c::Matrix{<:Complex}; d::Bool=false, e::Vector{Function}=Function[])\nend","category":"page"},{"location":"developer/style.html#Types-and-Enums","page":"Style Guide","title":"Types & Enums","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"When specifying types, i.e. when specifying the type of a function argument, or creating enums, these guidelines are recommended:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Prefer to use Vector{T} instead of Array{T,1}\nPrefer to use Matrix{T} instead of Array{T,2}\nEnums must be added to the JSON parser when introduced","category":"page"},{"location":"developer/style.html#Constants","page":"Style Guide","title":"Constants","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Whenever possible, const should be used to eliminate unnecesary re-evaluations of code, and every const should have a docstring, whether internal or public.","category":"page"},{"location":"developer/style.html#JuMP-Variables-and-Constraints","page":"Style Guide","title":"JuMP Variables and Constraints","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"For functions that create JuMP variables and constraints in particular, we follow the following naming convention as originally adopted by PowerModels:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"<jump macro id>(_<phase variant>)_<comp short name>_<quantity name>(_real|_imaginary|_magnitude|_angle|_factor)(_fr|_to)(_sqr)(_on_off)","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"in the interest of intuitive names for users, the following special cases are also acceptable,","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"_power_real -(can be replaced with)-> _active\n_power_imaginary -(can be replaced with)-> _reactive","category":"page"},{"location":"developer/style.html#Formulation-Styles","page":"Style Guide","title":"Formulation Styles","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new formulations should have clear error messages when they do not support existing components. For example, if a formulation addition which is intended to work with OPF does not support delta-wye transformers, the constraint_mc_transformer_power_dy\nFormulation abstract type and mutable struct must be specified in CapitalizedWords, which is a subtype of camelCase with the first word also capitalized.","category":"page"},{"location":"developer/style.html#Problem-Specification-Styles","page":"Style Guide","title":"Problem Specification Styles","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"If a new problem specification is only needed due to the requirements of a new formulation, and is not a new type of problem, e.g. another OPF formulation, a build_ function with the same name as the existing formulation should be created that accepts a specific PowerModel (multiple dispatch)\nIf a new problem specification is a new type of problem that will e.g. accept multiple formulations, new build_ and solve_ functions should be created that do not collide with existing problem specification functions","category":"page"},{"location":"developer/style.html#Metaprogramming","page":"Style Guide","title":"Metaprogramming","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"In general, it is better to avoid metaprogramming patterns, like creating functions algorithmically, in order to aid in the debugging of code. Metaprogramming can create significant challenges in interpreting stacktraces upon errors.","category":"page"},{"location":"developer/style.html#Markdown","page":"Style Guide","title":"Markdown","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Markdown files should be properly formatted, particularly when including tables. Developers are encouraged to use markdownlint and a markdown formatter (such as in VSCode).","category":"page"},{"location":"developer/style.html#File-Structure","page":"Style Guide","title":"File Structure","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"It is important that new functions, variables, constraints, etc. all go into appropriate places in the code base so that future maintenance and debugging is easier. Pay attention to the current file structure and attempt to conform as best as possible to it. In general","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"src/core contains the core logic of the package, including variable creation and constraint templates, i.e. things that are agnostic to the formulation\nsrc/form contains formulation specific variable and constraint functions, organized under separate files for different formulations\nsrc/prob contains problem specification-related functions, organized under separate files for different problem specifications\nsrc/io contains all of the tools to parse and save files\ndocs/src contains all source markdown files for the documentation\nexamples contains Jupyter notebooks with walkthroughs of PowerModelsITD for new users\ntest/data contains all data related to example and unit test cases\ntest/ contains files with unit test cases","category":"page"},{"location":"developer/style.html#Dependencies-(Project.toml)","page":"Style Guide","title":"Dependencies (Project.toml)","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new dependencies should be carefully considered before being added. It is important to keep the number of external dependencies low to avoid reliance on features that may not be maintained in the future. If possible, Julia Standard Library should be used, particularly in the case where reproducing the desired feature is trivial. There will be cases where it is not simple to duplicate a feature and subsequently maintain it within the package, so adding a dependency would be appropriate in such cases.","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new dependencies are are ultimately approved should also include an entry under [compat] indicating the acceptable versions (Julia automerge requirement). This includes test-only dependencies that appear under [extras]","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"The Manifest.toml should not be included in the repo.","category":"page"},{"location":"tutorials/Beginners Guide.html#Introduction-to-PowerModelsITD","page":"Beginners Guide","title":"Introduction to PowerModelsITD","text":"","category":"section"},{"location":"tutorials/Beginners Guide.html","page":"Beginners Guide","title":"Beginners Guide","text":"Stub for Beginners Guide.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"reference/base.html#Base","page":"Base","title":"Base","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"ref\nvar\nids\ncon\nsol\nnws\nnw_ids","category":"page"},{"location":"reference/base.html#PowerModelsITD.ref","page":"Base","title":"PowerModelsITD.ref","text":"helper function to access the AbstractPowerModelITD structs' ref, returns (id,data) pairs\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.var","page":"Base","title":"PowerModelsITD.var","text":"helper function to access the AbstractPowerModelITD structs' var, returns JuMP VariableRef\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.ids","page":"Base","title":"PowerModelsITD.ids","text":"helper function to access the ids of AbstractPowerModelITD structs' ref, returns ints\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.con","page":"Base","title":"PowerModelsITD.con","text":"helper function to access the AbstractPowerModelITD structs' con, returns JuMP Constraint\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.sol","page":"Base","title":"PowerModelsITD.sol","text":"helper function to access the AbstractPowerModelITD structs' sol, returns Dict\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.nws","page":"Base","title":"PowerModelsITD.nws","text":"helper function to access multinetwork data from AbstractPowerModelITD structs, returns (id,data) pairs\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsITD.nw_ids","page":"Base","title":"PowerModelsITD.nw_ids","text":"helper function to access the ids of multinetworks from AbstractPowerModelITD structs, returns ints\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#Helper-functions","page":"Base","title":"Helper functions","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"@smart_constraint\nsilence!","category":"page"},{"location":"reference/base.html#PowerModelsITD.silence!","page":"Base","title":"PowerModelsITD.silence!","text":"Suppresses information and warning messages output by PowerModels and PowerModelsDistribution\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#Ref-Creation-Functions","page":"Base","title":"Ref Creation Functions","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"ref_\")","category":"page"},{"location":"reference/base.html#PowerModelsITD.ref_add_core!-Tuple{Dict{Symbol}}","page":"Base","title":"PowerModelsITD.ref_add_core!","text":"function ref_add_core!(ref::Dict{Symbol,Any})\n\nReturns a dict that stores commonly used pre-computed data obtained from the data dictionary, primarily for converting data-types, filtering out loads in the transmission-side system, removing slack generators in the distribution-side system, and storing system-wide values that need to be computed globally. Some of the common keys include:\n\nSee ref_add_core!(ref) from PowerModels),\nSee ref_add_core!(ref) from PowerModelsDistribution),\n:boundary – the set of boundary elements that are active in the network,\n:arcs_boundary_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:boundary]],\n:arcs_boundary_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:boundary]],\n:arcs_boundary – the set of arcs from both arcs_boundary_from and arcs_boundary_to,\n:bus_arcs_boundary_from – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_boundary_from]]),\n:bus_arcs_boundary_to – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_boundary_to]]).\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#VariableAPI","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"reference/variables.html","page":"Variables","title":"Variables","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"variable\")","category":"page"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_current-Tuple{AbstractIVRPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_current","text":"Boundary current flow variables - IVR cases (Current Real and Current Imaginary)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_current_imaginary_from-Tuple{AbstractIVRPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_current_imaginary_from","text":"Variable: cibound_fr[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_from\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_current_imaginary_to-Tuple{AbstractIVRPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_current_imaginary_to","text":"Variable: cibound_to[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_to\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_current_real_from-Tuple{AbstractIVRPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_current_real_from","text":"Variable: crbound_fr[l,i,j] for (l,i,j) in arcs bus_arcs_conns_boundary_from\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_current_real_to-Tuple{AbstractIVRPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_current_real_to","text":"Variable: crbound_to[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_to\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power-Tuple{AbstractLPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power","text":"Boundary power flow variables - DC cases (P-only)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power-Tuple{AbstractPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power","text":"Boundary power flow variables - AC cases (P and Q)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power_imaginary_from-Tuple{AbstractPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power_imaginary_from","text":"Variable: qbound_fr[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_from\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power_imaginary_to-Tuple{AbstractPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power_imaginary_to","text":"Variable: qbound_to[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_to\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power_real_from-Tuple{AbstractPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power_real_from","text":"Variable: pbound_fr[l,i,j] for (l,i,j) in arcs bus_arcs_conns_boundary_from\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsITD.variable_boundary_power_real_to-Tuple{AbstractPowerModelITD}","page":"Variables","title":"PowerModelsITD.variable_boundary_power_real_to","text":"Variable: pbound_to[l,i,j] for (l,i,j) in bus_arcs_conns_boundary_to\n\n\n\n\n\n","category":"method"},{"location":"reference/constants.html#ConstantsAPI","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"reference/constants.html","page":"Constants","title":"Constants","text":"BOUNDARY_NUMBER","category":"page"},{"location":"reference/constants.html#PowerModelsITD.BOUNDARY_NUMBER","page":"Constants","title":"PowerModelsITD.BOUNDARY_NUMBER","text":"BOUNDARY_NUMBER constant that determines the starting counter for the boundaries defined.\n\n\n\n\n\n","category":"constant"},{"location":"reference/constants.html","page":"Constants","title":"Constants","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:constant]\nFilter = t -> isa(t, Dict) || isa(t, Vector) || isa(t, String)","category":"page"},{"location":"reference/data_models.html#DataModelAPI","page":"Data Models","title":"Data Models and Parsers","text":"","category":"section"},{"location":"reference/data_models.html#Parsers","page":"Data Models","title":"Parsers","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"parse_files\nparse_json\nparse_link_file\nparse_power_transmission_file\nparse_power_distribution_file","category":"page"},{"location":"reference/data_models.html#PowerModelsITD.parse_files","page":"Data Models","title":"PowerModelsITD.parse_files","text":"function parse_files(\n    pm_file::String,\n    pmd_file::String,\n    pmitd_file::String;\n    multinetwork::Bool=false\n)\n\nParses PowerModels, PowerModelsDistribution, and PowerModelsITD boundary linkage input files and returns a data dictionary with the combined information of the inputted dictionaries.\n\n\n\n\n\nfunction parse_files(\n    pm_file::String,\n    pmd_files::Vector,\n    pmitd_file::String;\n    multinetwork::Bool=false\n)\n\nParses PowerModels, PowerModelsDistribution vector, and PowerModelsITD linkage input files and returns a data dictionary with the combined information of the inputted dictionaries.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.parse_json","page":"Data Models","title":"PowerModelsITD.parse_json","text":"function parse_json(\n    path::String\n)\n\nParses a JavaScript Object Notation (JSON) file from the file path path and returns a dictionary containing the corresponding parsed data. Primarily used for boundry linkage files.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.parse_link_file","page":"Data Models","title":"PowerModelsITD.parse_link_file","text":"function parse_link_file(\n    pmitd_file::String\n)\n\nParses a linking file from the file pmitd_file and returns a PowerModelsITD data structured linking network dictionary.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.parse_power_transmission_file","page":"Data Models","title":"PowerModelsITD.parse_power_transmission_file","text":"function parse_power_transmission_file(\n    pm_file::String;\n    skip_correct::Bool = true,\n    multinetwork::Bool=false,\n    number_multinetworks::Int=0\n)\n\nParses a power transmission file from the file pm_file and returns a PowerModels data structured pm network dictionary.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.parse_power_distribution_file","page":"Data Models","title":"PowerModelsITD.parse_power_distribution_file","text":"function parse_power_distribution_file(\n    pmd_file::String,\n    pmd_base::Dict{String,<:Any}=Dict{String, Any}(),\n    ms_num::Int=1;\n    unique::Bool=true,\n    multinetwork::Bool=false)\n)\n\nParses power distribution files from the file pmd_file depending on the file extension. pmd_base represents a dictionary that contains data from other pmd systems, ms_num is the multi-system number (current distribution system number) and unique represents if the pmd data provided is the first one passed or unique. If it is not unique, then the components need to be renamed before being added. Returns a PowerModelsDistribution data structured pmd network (a dictionary) with renamed components (if applicable).\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#Data-Transformations","page":"Data Models","title":"Data Transformations","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nPages = [\"transformations.jl\"]","category":"page"},{"location":"reference/data_models.html#PowerModelsITD.apply_kron_reduction!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsITD.apply_kron_reduction!","text":"function apply_kron_reduction!(\n    pmitd_data::Dict{String,<:Any}\n)\n\nApplies the corresponding transformation that applies a Kron Reduction to the network, reducing out the kr_neutral, leaving only the kr_phases.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsITD.apply_phase_projection!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsITD.apply_phase_projection!","text":"function apply_phase_projection!(\n    pmitd_data::Dict{String,<:Any}\n)\n\nApplies the corresponding transformation to apply phase projection: pad matrices and vectors to max number of conductors\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsITD.apply_phase_projection_delta!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsITD.apply_phase_projection_delta!","text":"function apply_phase_projection_delta!(\n    pmitd_data::Dict{String,<:Any}\n)\n\nApplies the corresponding transformation to apply phase projection delta for components where unprojected states are not yet supported (delta configurations). See [apply_phase_projection!]\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsITD.apply_voltage_angle_difference_bounds!","page":"Data Models","title":"PowerModelsITD.apply_voltage_angle_difference_bounds!","text":"function apply_voltage_angle_difference_bounds!(\n    pmitd_data::Dict{String,<:Any},\n    vad::Real=5.0\n)\n\nApplies the corresponding transformation of voltage angle difference bound given by vad::Real in degrees (i.e., the allowed drift of angle from one end of a line to another) to all lines, to the pmd dictionary.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.apply_voltage_bounds!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsITD.apply_voltage_bounds!","text":"function apply_voltage_bounds!(\n    pmitd_data::Dict{String,<:Any};\n    vm_lb::Union{Real,Missing}=0.9,\n    vm_ub::Union{Real,Missing}=1.1\n)\n\nApplies the corresponding transformation of voltage bounds to all buses based on per-unit upper (vm_ub) and lower (vm_lb) bounds, scaled by the bus' voltage, to the pmd dictionary.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsITD.make_lossless!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsITD.make_lossless!","text":"function make_lossless!(\n    pmitd_data::Dict{String,<:Any}\n)\n\nApplies the corresponding transformation that removes parameters from objects with loss models to make them lossless. This includes switches voltage sources and transformers, which all have loss model parameters that can be omitted.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsITD.remove_all_bounds!","page":"Data Models","title":"PowerModelsITD.remove_all_bounds!","text":"function remove_all_bounds!(\n    pmitd_data::Dict{String,<:Any};\n    exclude::Vector{<:String}=String[\"energy_ub\"]\n)\n\nApplies the corresponding transformation that removes all fields ending in 'ub' or 'lb' that aren't required by the math model. Properties can be excluded from this removal with exclude::Vector{String}. By default, \"energy_ub\" is excluded from this removal, since it is a required property on storage (in pmd).\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#Data-Checking-and-Units-Correction","page":"Data Models","title":"Data Checking and Units Correction","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"correct_network_data!\nassign_boundary_buses!\nresolve_units!\nreplicate\nsol_data_model!","category":"page"},{"location":"reference/data_models.html#PowerModelsITD.correct_network_data!","page":"Data Models","title":"PowerModelsITD.correct_network_data!","text":"function correct_network_data!(\n    data::Dict{String,<:Any};\n    multinetwork::Bool=false\n)\n\nCorrects and prepares the data in both pm and pmd dictionaries. Also, assigns the ids given in the boundary linking data to number buses. data is the pmitd dictionary to be corrected and multinetwork is the boolean that defines if there are multinetwork boundary buses to be assigned.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.assign_boundary_buses!","page":"Data Models","title":"PowerModelsITD.assign_boundary_buses!","text":"function assign_boundary_buses!(\n    data::Dict{String,<:Any};\n    multinetwork::Bool=false\n)\n\nAssigns the names given in the boundary linking data to number buses in corresponding transmission and distribution networks. data is the pmitd dictionary containing the boundary information and multinetwork is the boolean that defines if there are multinetwork boundary buses to be assigned.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.resolve_units!","page":"Data Models","title":"PowerModelsITD.resolve_units!","text":"function resolve_units!(\n    data::Dict{String,<:Any};\n    multinetwork::Bool=false,\n    number_multinetworks::Int=0\n)\n\nResolve the units used throughout the disparate datasets by setting the same settings bases. data is the pmitd dictionary to be corrected by resolving units, multinetwork is the boolean that defines if there are multiple networks that need to be corrected, and number_multinetworks defines the number of multinetworks.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.replicate","page":"Data Models","title":"PowerModelsITD.replicate","text":"function replicate(\n    sn_data::Dict{String,<:Any},\n    count::Int;\n    global_keys::Set{String}=Set{String}()\n)\n\nTurns in given single network pmitd data in multinetwork data with a count replicate of the given network. Note that this function performs a deepcopy of the network data. Significant multinetwork space savings can often be achieved by building application specific methods of building multinetwork with minimal data replication. sn_data is the data to be replicated, count is the number of networks to be replicated.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsITD.sol_data_model!","page":"Data Models","title":"PowerModelsITD.sol_data_model!","text":"function sol_data_model!(\n    pmitd::AbstractPowerModelITD,\n    solution::Dict{String,<:Any}\n)\n\nsolution_processor to convert the solution(s) to polar voltage magnitudes and angles.\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#ObjectiveAPI","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"reference/objectives.html","page":"Objectives","title":"Objectives","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"objective\")","category":"page"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_cost-Tuple{AbstractPowerModelITD}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_cost","text":"function objective_itd_min_fuel_cost(\n    pmitd::AbstractPowerModelITD\n)\n\nStandard fuel cost minimization objective.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_cost_polynomial-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_cost_polynomial","text":"function objective_itd_min_fuel_cost_polynomial(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_cost_pwl-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_cost_pwl","text":"function objective_itd_min_fuel_cost_pwl(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective with piecewise linear terms.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_distribution_load_setpoint_delta-Tuple{AbstractPowerModelITD}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_distribution_load_setpoint_delta","text":"function objective_itd_min_fuel_distribution_load_setpoint_delta(\n    pmitd::AbstractPowerModelITD\n)\n\nStandard fuel cost minimization for transmission and minimum load delta objective with storage for distribution objective.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_distribution_load_setpoint_delta_simple-Tuple{AbstractPowerModelITD}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_distribution_load_setpoint_delta_simple","text":"function objective_itd_min_fuel_distribution_load_setpoint_delta_simple(\n    pmitd::AbstractPowerModelITD\n)\n\nStandard fuel cost minimization for transmission and simplified minimum load delta objective (continuous load shed) for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta","text":"function objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms in transmission and load setpoint delta for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta_simple-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta_simple","text":"function objective_itd_min_fuel_polynomial_distribution_load_setpoint_delta_simple(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms in transmission and load setpoint delta (continuous load shed) for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_pwl_distribution_load_setpoint_delta-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_pwl_distribution_load_setpoint_delta","text":"function objective_itd_min_fuel_pwl_distribution_load_setpoint_delta(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective with piecewise linear terms in transmission and load setpoint delta for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_itd_min_fuel_pwl_distribution_load_setpoint_delta_simple-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_itd_min_fuel_pwl_distribution_load_setpoint_delta_simple","text":"function objective_itd_min_fuel_pwl_distribution_load_setpoint_delta_simple(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective with piecewise linear terms in transmission and load setpoint delta (continuous load shed) for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_mc_variable_pg_cost-Tuple{PowerModelsDistribution.AbstractUnbalancedIVRModel}","page":"Objectives","title":"PowerModelsITD.objective_mc_variable_pg_cost","text":"function objective_mc_variable_pg_cost(\n    pm::_PMD.AbstractUnbalancedIVRModel\n)\n\nAdds pgcost variables and constraints (IVR formulation) (Copied from PMD and modified to allow differentiation with TD gens (...dist)).\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsITD.objective_mc_variable_pg_cost-Tuple{PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsITD.objective_mc_variable_pg_cost","text":"function objective_mc_variable_pg_cost(\n    pm::_PMD.AbstractUnbalancedPowerModel\n)\n\nAdds pgcost variables and constraints (Copied from PMD and modified to allow differentiation with TD gens (...dist)).\n\n\n\n\n\n","category":"method"},{"location":"manual/quickguide.html#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"manual/quickguide.html#Running-Integrated-Transmission-Distribution-Optimal-Power-Flow-(OPFITD)","page":"Getting Started","title":"Running Integrated Transmission-Distribution Optimal Power Flow (OPFITD)","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsITD is installed, Ipopt is installed, and network data files for the transmission system, distribution system(s), and boundary linking (e.g., \"case5_withload.m\", \"case3_unbalanced.dss, \"case5_case3.json\" in the package folder under ./test/data) have been acquired, an Integrated Transmission-Distribution (ITD) AC Optimal Power Flow can be executed as follows,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using PowerModelsITD\nusing Ipopt\n\npmitd_type = NLPowerModelITD{ACPPowerModel, ACPUPowerModel} # define the formulation type.\n\nsolve_opfitd(\"case5_withload.m\", \"case3_unbalanced.dss\", \"case5_case3.json\", pmitd_type, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html#Running-Integrated-Transmission-Distribution-Optimal-Power-Flow-(OPFITD)-with-Multiple-Distribution-Systems","page":"Getting Started","title":"Running Integrated Transmission-Distribution Optimal Power Flow (OPFITD) with Multiple Distribution Systems","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The snippet shown below demonstrates how to run an OPFITD with multiple(different) distribution systems connected to different transmission system buses. In summary, the distribution system files need to be passed as a Vector of files, and the corresponding boundaries are defined in the boundary linking. For the following snippet, assume we have access to ./test/data to get the respective files.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using PowerModelsITD\nusing Ipopt\n\n# Files\npm_file = \"case5_with2loads.m\"\npmd_file1 = \"case3_unbalanced.dss\"\npmd_file2 = \"case3_balanced.dss\"\npmitd_file = \"case5_case3x2.json\"\n\npmd_files = [pmd_file1, pmd_file2] # create a vector of distribution system files.\n\npmitd_type = NLPowerModelITD{ACPPowerModel, ACPUPowerModel} # define the formulation type.\n\nsolve_opfitd(pm_file, pmd_files, pmitd_file, pmitd_type, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html#Parsing-files","page":"Getting Started","title":"Parsing files","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"To parse the respective files into PowerModelsITD, use the parse_files command","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"pmitd_data = parse_files(pm_file, pmd_file, pmitd_file) # single distribution system file.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"To parse for a model with multiple distribution system files, just pass the distribution system argument as a vector of files, as seen below.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"pmd_files = [pmd_file1, pmd_file2]\npmitd_data = parse_files(pm_file, pmd_files, pmitd_file) # vector of multiple distribution system files.","category":"page"},{"location":"manual/quickguide.html#Getting-Results","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The run commands in PowerModelsITD return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = solve_opfitd(pmitd_data, NLPowerModelITD{ACPPowerModel, ACPUPowerModel}, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Note: the function solve_opfitd(...) does not neccessarily needs for the data to be parsed (i.e., parse_files(...)). The user can pass directly the files of the problem to the solve_opfitd(...) function, as seen above.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can use the function solve_model(...) and specify the build method, in this case build_opfitd:","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = solve_model(pmitd_data, NLPowerModelITD{ACPPowerModel, ACPUPowerModel}, Ipopt.Optimizer, build_opfitd)","category":"page"},{"location":"manual/quickguide.html#Running-Multinetwork-(mn)-Integrated-Transmission-Distribution-Optimal-Power-Flow-(OPFITD)-with-Multiple-Distribution-Systems-(ms)","page":"Getting Started","title":"Running Multinetwork (mn) Integrated Transmission-Distribution Optimal Power Flow (OPFITD) with Multiple Distribution Systems (ms)","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The snippet shown below demonstrates how to run a Multinetwork OPFITD with multiple distribution systems connected to different transmission system buses. As seen previously, the distribution system files need to be passed as a Vector of files, and the corresponding boundaries are defined in the boundary linking file. To run a multinetwork problem, time series values can be defined inside the opendss file(s) that represent the distribution system(s). Some important things to remember are:","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The time series values can be defined in a .csv file that is called inside the opendss file(s).\nWhen the data is parsed, the transmission system will be automatically replicated to the number of time series values available in the opendss file(s).\nIf data in the transmission system need to be modified for different time steps, the data can be modified after the parsing process is done.\nRemember to run the special multinetwork function or build function (i.e., solve_mn_opfitd(...) or solve_model(..., build_mn_opfitd)).","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"For the following snippet, assume we have access to ./test/data to get the respective files.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using PowerModelsITD\nusing Ipopt\n\n# Files\npm_file = \"case5_with2loads.m\"\npmd_file1 = \"case3_unbalanced_withoutgen_mn.dss\"\npmitd_file = \"case5_case3x2.json\"\n\npmd_files = [pmd_file1, pmd_file1] # create a vector of distribution system files.\n\npmitd_type = NLPowerModelITD{ACPPowerModel, ACPUPowerModel} # define the formulation type.\n\nresult = solve_mn_opfitd(pm_file, pmd_files, pmitd_file, pmitd_type, Ipopt.Optimizer)\n","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Important Note: If you examine the file case3_unbalanced_withoutgen_mn.dss in detail, you will notice how time series power values are defined inside the opendss file as New Loadshape.ls1 pmult=(file=load_profile.csv), and then the load models are defined with parameters model=1 daily=ls1. This definition is sufficient for PowerModelsITD to understand that this is a multinetwork problem. If you examine the content of the load_profile.csv file, you will notice that there are 4 time steps. This will cause transmission, distribution, and boundary data to be replicated x4 (i.e., 4 times) while it is parsed to represent the overall problem.","category":"page"},{"location":"manual/quickguide.html#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"There is a diverse number of formulations that can be used to solve the OPFITD, PFITD, and other problem specifications. These can be found in types.jl. A non-exhaustive list of the supported formulations is presented below.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"NLPowerModelITD{ACPPowerModel, ACPUPowerModel} indicates an AC to AC formulation in polar coordinates.\nNLPowerModelITD{ACRPowerModel, ACRUPowerModel} indicates an AC to AC formulation in rectangular coordinates.\nLPowerModelITD{NFAPowerModel, NFAUPowerModel} indicates a linear network active power flow to network active power flow formulation.\nIVRPowerModelITD{IVRPowerModel, IVRUPowerModel} indicates an AC current-voltage to AC current-voltage formulation.\nBFPowerModelITD{SOCBFPowerModel, SOCNLPUBFPowerModel} indicates an SOC branch-flow to SOC branch-flow formulation.\nNLBFPowerModelITD{ACRPowerModel, FBSUBFPowerModel} indicates an AC in rectangular coordinates to forward-backward sweep formulation.\nNLFOTPowerModelITD{ACRPowerModel, FOTRUPowerModel} indicates an AC in rectangular coordinates to first-order Taylor in rectangular coordinates formulation.\nNLFOTPowerModelITD{ACPPowerModel, FOTPUPowerModel} indicates an AC in polar coordinates to first-order Taylor in polar coordinates formulation.","category":"page"},{"location":"manual/quickguide.html#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"More examples of working with the engineering data model can be found in the /examples folder of the PowerModelsITD.jl repository. These are Pluto Notebooks; instructions for running them can be found in the Pluto documentation.","category":"page"},{"location":"reference/formulations.html#FormulationAPI","page":"Formulations","title":"Formulations","text":"","category":"section"},{"location":"reference/formulations.html#Abstract-Models","page":"Formulations","title":"Abstract Models","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"AbstractPowerModelITD\nAbstractNLPowerModelITD\nAbstractLPowerModelITD\nAbstractIVRPowerModelITD\nAbstractBFPowerModelITD\nAbstractLNLBFPowerModelITD","category":"page"},{"location":"reference/formulations.html#PowerModelsITD.AbstractPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractPowerModelITD","text":"Root of the PowerModelsITD formulation hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.AbstractNLPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractNLPowerModelITD","text":"Abstract Non-Linear ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.AbstractLPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractLPowerModelITD","text":"Abstract Linear ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.AbstractIVRPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractIVRPowerModelITD","text":"Abstract Current-Voltage (IVR) ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.AbstractBFPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractBFPowerModelITD","text":"Abstract Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.AbstractLNLBFPowerModelITD","page":"Formulations","title":"PowerModelsITD.AbstractLNLBFPowerModelITD","text":"Abstract Linear/Non-Linear to Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#Power-ITD-Models","page":"Formulations","title":"Power ITD Models","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"PowerModelITD\nNLPowerModelITD\nLPowerModelITD\nIVRPowerModelITD\nBFPowerModelITD\nNLFOTPowerModelITD\nNLBFPowerModelITD\nLBFPowerModelITD\nWRBFPowerModelITD","category":"page"},{"location":"reference/formulations.html#PowerModelsITD.PowerModelITD","page":"Formulations","title":"PowerModelsITD.PowerModelITD","text":"General PowerModelITD\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.NLPowerModelITD","page":"Formulations","title":"PowerModelsITD.NLPowerModelITD","text":"Non-Linear to Non-Linear ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.LPowerModelITD","page":"Formulations","title":"PowerModelsITD.LPowerModelITD","text":"Linear to Linear ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.IVRPowerModelITD","page":"Formulations","title":"PowerModelsITD.IVRPowerModelITD","text":"IVR to IVR ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.BFPowerModelITD","page":"Formulations","title":"PowerModelsITD.BFPowerModelITD","text":"Branch-flow to Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.NLFOTPowerModelITD","page":"Formulations","title":"PowerModelsITD.NLFOTPowerModelITD","text":"Non-Linear to First-Order Taylor (FOT) ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.NLBFPowerModelITD","page":"Formulations","title":"PowerModelsITD.NLBFPowerModelITD","text":"Non-Linear to Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.LBFPowerModelITD","page":"Formulations","title":"PowerModelsITD.LBFPowerModelITD","text":"Linear to Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsITD.WRBFPowerModelITD","page":"Formulations","title":"PowerModelsITD.WRBFPowerModelITD","text":"WR to Branch-flow ITD formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#Mutable-Stuct-creator","page":"Formulations","title":"Mutable Stuct creator","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"@pmitd_fields","category":"page"},{"location":"reference/formulations.html#PowerModelsITD.@pmitd_fields","page":"Formulations","title":"PowerModelsITD.@pmitd_fields","text":"A macro for adding the base PowerModelsITD fields to a type definition.\n\n\n\n\n\n","category":"macro"},{"location":"developer/contributing.html#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"developer/contributing.html#Pull-Requests","page":"Contributing","title":"Pull Requests","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"All pull requests should be reviewed by a core developer, and may include a review by a subject matter expert if the area of the PR is outside that of one of the core developers. In that case, the core developers will primarily review style and design, rather than substance.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Every PR to PowerModelsITD should strive to meet the following guidelines.","category":"page"},{"location":"developer/contributing.html#PR-Title","page":"Contributing","title":"PR Title","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Should be concise and clear, describing in a phrase the content of the PR\nShould include a prefix that describes the primary type of the PR\nADD: feature addition\nFIX: bugfix\nREF: refactor\nUPD: updates to code for e.g. version bumps of dependencies\nSTY: style changes, no changes to function names, added features, etc.\nDOC: documentation-only additions/changes\nRM: dead code removal","category":"page"},{"location":"developer/contributing.html#PR-Body","page":"Contributing","title":"PR Body","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"If the change is breaking, it should be clearly stated up front\nThe purpose of this PR should be clearly stated right away\nMajor changes / additions to the code should be summarized. In the case where a refactor was performed, the name changes of public functions should be documented in the body of the PR\nAny associated Issues should be referenced in the body of the PR, and it is accepted/encouraged to use Closes #XX to automatically close Issues after the PR is merged","category":"page"},{"location":"developer/contributing.html#PR-Code","page":"Contributing","title":"PR Code","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"An entry should be added to CHANGELOG.md for every PR\nDocumentation should be updated (See Documentation section above for guidelines)\nUnit tests should be added. In the case where existing unit tests were altered, an explanation for the change must be included\nCode should be rebased to the latest version of whatever branch the PR is aimed at (no merge conflicts!)","category":"page"},{"location":"developer/contributing.html#Versions","page":"Contributing","title":"Versions","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"PowerModelsITD follows the Semantic Versioning (SemVer) convention of Major.minor.patch, where Major indicates breaking changes, minor indicates non-breaking feature additions, and patch indicates non-breaking bugfixes.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Currently, because Major==0, minor indicates breaking changes and patch indicates any non-breaking change, including both feature additions and bugfixes. Once PowerModelsITD reaches v1.0.0, we will adhere strictly to the SemVer convention.","category":"page"},{"location":"developer/contributing.html#Branch-Management","page":"Contributing","title":"Branch Management","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"The main branch is a protected branch, meaning that its history will always be contiguous and can never be overwritten.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Release candidate branches of the format vM.m.0-rc are also protected branches. These branches will contain only breaking changes and will not be merged into main until a new version is ready to be tagged. Pull requests including breaking changes should be directed into the next release candidate branch available, e.g. if the current version of the package is v0.9.0, the next release candidate branch will be v0.10.0-rc.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Pull requests that include only non-breaking changes can be merged directly into main once approved, and in the case of merge conflicts arising for release candidate branches, the -rc branch will need to be updated to include the latest main.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Pull requests will generally be merged using squash and merge into the branch they are aimed at, with the exception of release candidate branches, which generally be merged using rebase and merge into main.","category":"page"},{"location":"reference/problems.html#ProblemAPI","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"reference/problems.html#Solve-Problems","page":"Problems","title":"Solve Problems","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"solve\")","category":"page"},{"location":"reference/problems.html#PowerModelsITD.solve_dmld_opfitd-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_dmld_opfitd","text":"function solve_dmld_opfitd(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Integrated T&D Optimal Power Flow with minimum load delta (dmld).\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_mn_dmld_opfitd_simple-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_mn_dmld_opfitd_simple","text":"function solve_mn_dmld_opfitd_simple(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Multinetwork Integrated T&D Optimal Power Flow with minimum load delta (dmld continuous).\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_mn_opfitd-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_mn_opfitd","text":"function solve_mn_opfitd(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Multinetwork Integrated T&D Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_mn_opfitd_oltc-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_mn_opfitd_oltc","text":"function solve_mn_opfitd_oltc(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Multinetwork Integrated T&D OLTC Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_model-Tuple{Dict{String}, Type, Any, Function}","page":"Problems","title":"PowerModelsITD.solve_model","text":"function solve_model(\n    pmitd_data::Dict{String,<:Any},\n    pmitd_type::Type, optimizer,\n    build_method::Function;\n    multinetwork::Bool=false,\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    make_si::Bool=true,\n    kwargs...\n)\n\nInstantiates and solves the integrated Transmission (PowerModels) & Distribution (PowerModelsDistribution) modeling object from power integrated transmission-distribution input data, pmitd_data. Here, pmitd_type is the integrated power transmission-distribution modeling type, build_method is the build method for the problem specification being considered, multinetwork is the boolean that defines if the modeling object should be define as multinetwork, solution_processors is the vector of the model solution processors, pmitd_ref_extensions is the array of modeling extensions, and make_si is the boolean that determines if the results are returned in SI or per-unit. Returns a dictionary of results.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_model-Tuple{String, String, String, Type, Any, Function}","page":"Problems","title":"PowerModelsITD.solve_model","text":"function solve_model(\n    pm_file::String,\n    pmd_file::String,\n    pmitd_file::String,\n    pmitd_type::Type,\n    optimizer,\n    build_method::Function;\n    multinetwork::Bool=false,\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    make_si::Bool=true,\n    kwargs...\n)\n\nParses, instantiates, and solves the integrated Transmission (PowerModels) & Distribution (PowerModelsDistribution) modeling objects from power transmission, power distribution, and boundry linking input files pm_file, pmd_file, and pmitd_file, respectively. Here, pmitd_type is the integrated power transmission-distribution modeling type, optimizer is the optimzer used to solve the problem, build_method is the build method for the problem specification being considered, multinetwork is the boolean that defines if the modeling object should be define as multinetwork, solution_processors is the vector of the model solution processors, pmitd_ref_extensions is the array of modeling extensions, and make_si is the boolean that determines if the results are returned in SI or per-unit. Returns a dictionary of results.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_model-Tuple{String, Vector, String, Type, Any, Function}","page":"Problems","title":"PowerModelsITD.solve_model","text":"function solve_model(\n    pm_file::String,\n    pmd_files::Vector,\n    pmitd_file::String,\n    pmitd_type::Type,\n    optimizer,\n    build_method::Function;\n    multinetwork::Bool=false,\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    make_si::Bool=true,\n    kwargs...\n)\n\nParses, instantiates, and solves the integrated Transmission (PowerModels) & Distribution (PowerModelsDistribution) modeling objects from power transmission, multiple power distribution systems, and boundary linking input files pm_file, pmd_files vector of files, and pmitd_file, respectively. Here, pmitd_type is the integrated power transmission-distribution modeling type, optimizer is the optimzer used to solve the problem, build_method is the build method for the problem specification being considered, multinetwork is the boolean that defines if the modeling object should be define as multinetwork,solution_processors is the vector of the model solution processors, pmitd_ref_extensions is the array of modeling extensions, and make_si is the boolean that determines if the results are returned in SI or per-unit. Returns a dictionary of results.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_opfitd-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_opfitd","text":"function solve_opfitd(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Integrated T&D Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_opfitd_oltc-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_opfitd_oltc","text":"function solve_opfitd_oltc(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Integrated T&D OLTC Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.solve_pfitd-NTuple{5, Any}","page":"Problems","title":"PowerModelsITD.solve_pfitd","text":"function solve_pfitd(\n    pm_file,\n    pmd_file,\n    pmitd_file,\n    pmitd_type,\n    optimizer;\n    solution_processors::Vector{<:Function}=Function[],\n    pmitd_ref_extensions::Vector{<:Function}=Vector{Function}([]),\n    make_si::Bool=true,\n    kwargs...\n)\n\nSolve Integrated T&D Power Flow\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#Builders","page":"Problems","title":"Builders","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"build\")","category":"page"},{"location":"reference/problems.html#PowerModelsITD.build_dmld_opfitd-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_dmld_opfitd","text":"function build_dmld_opfitd(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow with minimum load delta (mld) for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_dmld_opfitd-Tuple{AbstractIVRPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_dmld_opfitd","text":"function build_dmld_opfitd(\n\tpmitd::AbstractIVRPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow with minimum load delta (mld) in current-voltage (IV) variable space.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_dmld_opfitd-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_dmld_opfitd","text":"function build_dmld_opfitd(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow with minimum load delta (mld) for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_dmld_opfitd-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_dmld_opfitd","text":"function build_dmld_opfitd(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow with minimum load delta (mld).\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_dmld_opfitd_simple-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_dmld_opfitd_simple","text":"function build_mn_dmld_opfitd_simple(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow with minimum load delta (mld) for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_dmld_opfitd_simple-Tuple{AbstractIVRPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_dmld_opfitd_simple","text":"function build_mn_dmld_opfitd_simple(\n\tpmitd::AbstractIVRPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow with minimum load delta (mld) in current-voltage (IV) variable space.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_dmld_opfitd_simple-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_dmld_opfitd_simple","text":"function build_mn_dmld_opfitd_simple(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow with minimum load delta (mld) for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_dmld_opfitd_simple-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_dmld_opfitd_simple","text":"function build_mn_dmld_opfitd_simple(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow with minimum load delta (mld).\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd","text":"function build_mn_opfitd(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd-Tuple{AbstractIVRPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd","text":"function build_mn_opfitd(\n\tpmitd::AbstractIVRPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow in current-voltage (IV) variable space.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd","text":"function build_mn_opfitd(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd","text":"function build_mn_opfitd(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd_oltc-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd_oltc","text":"function build_mn_opfitd_oltc(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D OLTC Optimal Power Flow for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd_oltc-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd_oltc","text":"function build_mn_opfitd_oltc(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D OLTC Optimal Power Flow for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_mn_opfitd_oltc-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_mn_opfitd_oltc","text":"function build_mn_opfitd_oltc(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Multinetwork Integrated T&D OLTC Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd","text":"function build_opfitd(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd-Tuple{AbstractIVRPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd","text":"function build_opfitd(\n\tpmitd::AbstractIVRPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow in current-voltage (IV) variable space.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd","text":"function build_opfitd(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd","text":"function build_opfitd(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Integrated T&D Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd_oltc-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd_oltc","text":"function build_opfitd_oltc(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Integrated T&D OLTC Optimal Power Flow for BF Models.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd_oltc-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd_oltc","text":"function build_opfitd_oltc(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Integrated T&D OLTC Optimal Power Flow for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_opfitd_oltc-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_opfitd_oltc","text":"function build_opfitd_oltc(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Integrated T&D OLTC Optimal Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_pfitd-Tuple{AbstractBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_pfitd","text":"function build_pfitd(\n\tpmitd::AbstractBFPowerModelITD\n)\n\nConstructor for Integrated T&D Power Flow for Branch Flow (BF) Formulations.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_pfitd-Tuple{AbstractIVRPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_pfitd","text":"function build_pfitd(\n\tpmitd::AbstractIVRPowerModelITD\n)\n\nConstructor for Integrated T&D Power Flow in current-voltage (IV) variable space.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_pfitd-Tuple{AbstractLNLBFPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_pfitd","text":"function build_pfitd(\n\tpmitd::AbstractLNLBFPowerModelITD\n)\n\nConstructor for Integrated T&D Power Flow for L/NL to BF.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsITD.build_pfitd-Tuple{AbstractPowerModelITD}","page":"Problems","title":"PowerModelsITD.build_pfitd","text":"function build_pfitd(\n\tpmitd::AbstractPowerModelITD\n)\n\nConstructor for Integrated T&D Power Flow.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#Model-Instantiation","page":"Problems","title":"Model Instantiation","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"instantiate_model","category":"page"},{"location":"reference/problems.html#PowerModelsITD.instantiate_model","page":"Problems","title":"PowerModelsITD.instantiate_model","text":"function instantiate_model(\n    pm_file::String,\n    pmd_files::Vector,\n    pmitd_file::String,\n    pmitd_type::Type,\n    build_method::Function;\n    multinetwork::Bool=false,\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    kwargs...\n)\n\nInstantiates and returns PowerModelsITD modeling object from power transmission, power distribution, and boundary linking input files pm_file, pmd_files vector, and pmitd_file, respectively. Here, pmitd_type is the integrated power transmission-distribution modeling type and build_method is the build method for the problem specification being considered. multinetwork is the boolean that defines if the modeling object should be define as multinetwork. pmitd_ref_extensions are the arrays of power transmission and distribution modeling extensions.\n\n\n\n\n\nfunction instantiate_model(\n    pm_file::String,\n    pmd_file::String,\n    pmitd_file::String,\n    pmitd_type::Type,\n    build_method::Function;\n    multinetwork::Bool=false,\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    kwargs...\n)\n\nInstantiates and returns PowerModelsITD modeling object from power transmission, power distribution, and boundary linking input files pm_file, pmd_file (one file provided), and pmitd_file, respectively. Here, pmitd_type is the integrated power transmission-distribution modeling type and build_method is the build method for the problem specification being considered. multinetwork is the boolean that defines if the modeling object should be define as multinetwork. pmitd_ref_extensions are the arrays of power transmission and distribution modeling extensions.\n\n\n\n\n\nfunction instantiate_model(\n    pmitd_data::Dict{String,<:Any},\n    pmitd_type::Type,\n    build_method::Function;\n    multinetwork::Bool=false,\n    pmitd_ref_extensions::Vector{<:Function}=Function[],\n    kwargs...\n)\n\nInstantiates and returns PowerModelsITD modeling object from parsed power transmission and distribution (PMITD) input data pmitd_data. Here, pmitd_type is the integrated power transmission and distribution modeling type and build_method is the build method for the problem specification being considered. multinetwork is the boolean that defines if the modeling object should be define as multinetwork. pmitd_ref_extensions is an array of power transmission and distribution modeling extensions.\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#Internal-Functions","page":"Internal Functions","title":"Internal Functions","text":"","category":"section"},{"location":"reference/internal.html","page":"Internal Functions","title":"Internal Functions","text":"Modules = [PowerModelsITD]\nPublic = false","category":"page"},{"location":"reference/internal.html#PowerModelsITD._assign_boundary_buses!-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsITD._assign_boundary_buses!","text":"function _assign_boundary_buses!(\n    data::Dict{String,<:Any},\n    conn;\n    multinetwork::Bool=false,\n    nw::String=\"0\"\n)\n\nHelper function for assigning boundary buses. data is the pmitd dictionary containing the boundary information, conn is the boundary connection information, multinetwork is the boolean that defines if there are multinetwork boundary buses to be assigned, and nw is the network number.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._convert_to_pmitd_structure-Tuple{Vector{Any}}","page":"Internal Functions","title":"PowerModelsITD._convert_to_pmitd_structure","text":"function _convert_to_pmitd_structure(\n    data::Vector{Any}\n)\n\nConverts json data parsed into the required pmitd structure. Returns the new data structure with necessary information and compatible names.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._get_powermodel_from_powermodelitd-Tuple{AbstractPowerModelITD}","page":"Internal Functions","title":"PowerModelsITD._get_powermodel_from_powermodelitd","text":"function _get_powermodel_from_powermodelitd(\n    pm::AbstractPowerModelITD\n)\n\nGets the PM model from the PMITD model structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._get_powermodeldistribution_from_powermodelitd-Tuple{AbstractPowerModelITD}","page":"Internal Functions","title":"PowerModelsITD._get_powermodeldistribution_from_powermodelitd","text":"function _get_powermodeldistribution_from_powermodelitd(\n    pmd::AbstractPowerModelITD\n)\n\nGets the PMD model from the PMITD model structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_cost_polynomial_linquad-Tuple{AbstractIVRPowerModelITD, PowerModels.AbstractIVRModel, PowerModelsDistribution.AbstractUnbalancedIVRModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_cost_polynomial_linquad","text":"function _objective_itd_min_fuel_cost_polynomial_linquad(\n    pmitd::AbstractIVRPowerModelITD,\n    pm::_PM.AbstractIVRModel,\n    pmd::_PMD.AbstractUnbalancedIVRModel\n)\n\nFuel cost minimization objective for polynomial terms linear-quadratic (IVR formulation).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_cost_polynomial_linquad-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_cost_polynomial_linquad","text":"function _objective_itd_min_fuel_cost_polynomial_linquad(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms linear-quadratic.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_cost_polynomial_nl-Tuple{AbstractIVRPowerModelITD, PowerModels.AbstractIVRModel, PowerModelsDistribution.AbstractUnbalancedIVRModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_cost_polynomial_nl","text":"function _objective_itd_min_fuel_cost_polynomial_nl(\n    pmitd::AbstractIVRPowerModelITD,\n    pm::_PM.AbstractIVRModel,\n    pmd::_PMD.AbstractUnbalancedIVRModel\n)\n\nFuel cost minimization objective for polynomial terms non-linear (IVR formulation).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_cost_polynomial_nl-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_cost_polynomial_nl","text":"function _objective_itd_min_fuel_cost_polynomial_nl(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms non-linear.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta","text":"function _objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms linear-quadratic for transmission and load setpoint delta for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta_simple-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta_simple","text":"function _objective_itd_min_fuel_polynomial_linquad_distribution_load_setpoint_delta_simple(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms linear-quadratic for transmission and load setpoint delta (continuous load shed) for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta","text":"function _objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms non-linear for transmission and load setpoint delta for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta_simple-Tuple{AbstractPowerModelITD, PowerModels.AbstractPowerModel, PowerModelsDistribution.AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsITD._objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta_simple","text":"function _objective_itd_min_fuel_polynomial_nl_distribution_load_setpoint_delta_simple(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractPowerModel,\n    pmd::_PMD.AbstractUnbalancedPowerModel\n)\n\nFuel cost minimization objective for polynomial terms non-linear for transmission and load setpoint delta (continuous load shed) for distribution.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._ref_connect_transmission_distribution!-Tuple{Dict{Symbol}}","page":"Internal Functions","title":"PowerModelsITD._ref_connect_transmission_distribution!","text":"function _ref_connect_transmission_distribution!(\n    ref::Dict{Symbol,<:Any}\n)\n\nCreates the boundary refs that integrate/connect the transmission and distribution system bus(es).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._ref_filter_distribution_slack_generators!-Tuple{Dict{Symbol}}","page":"Internal Functions","title":"PowerModelsITD._ref_filter_distribution_slack_generators!","text":"function _ref_filter_distribution_slack_generators!(\n    ref::Dict{Symbol,<:Any}\n)\n\nRemoves/filters-out the slack generators at buses/nodes where the transmission system is going to be integrated/connected.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._ref_filter_transmission_integration_loads!-Tuple{Dict{Symbol}}","page":"Internal Functions","title":"PowerModelsITD._ref_filter_transmission_integration_loads!","text":"function _ref_filter_transmission_integration_loads!(\n    ref::Dict{Symbol,<:Any}\n)\n\nRemoves/filters-out the loads at buses (i.e., boundary buses) where distribution systems are going to be integrated/connected.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._ref_remove_refbus_distribution!-Tuple{Dict{Symbol}}","page":"Internal Functions","title":"PowerModelsITD._ref_remove_refbus_distribution!","text":"function _ref_remove_refbus_distribution!(\n    ref::Dict{Symbol,<:Any}\n)\n\nRemoves the reference(slack) bus in the distribution system(s).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._rename_components!-Tuple{Dict{String}, Dict{String}, Int64}","page":"Internal Functions","title":"PowerModelsITD._rename_components!","text":"function _rename_components!(\n    pmd_base::Dict{String,<:Any}, \n    data::Dict{String,<:Any}, \n    ms::Int\n)\n\nRenames the components given in data for multi-system number (ms), and adds the renamed components  to pmd_base dictionary structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._scale_loads!-Tuple{Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsITD._scale_loads!","text":"function _scale_loads!(\n    p_data::Dict{String,<:Any},\n    scalar::Real\n)\n\nScales loads based on the scalar passed as second argument. p_data is the dictionary that contains the loads to be scaled. scalar is the float value used to scale all the loads in the p_data dictionary.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._transform_pmitd_solution_to_si!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsITD._transform_pmitd_solution_to_si!","text":"function _transform_pmitd_solution_to_si!(\n    result::Dict{String,<:Any}\n)\n\nTransforms the PMITD solution from per-unit (pu) to SI units.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._transform_solution_to_pu!-Tuple{Any, Dict{String}}","page":"Internal Functions","title":"PowerModelsITD._transform_solution_to_pu!","text":"function _transform_solution_to_pu!(\n    result,\n    pmitd_data::Dict{String,<:Any};\n    make_si::Bool=false,\n    multinetwork::Bool=false\n)\n\nTransforms the PM and PMD solutions from SI units to per-unit (pu), and the PMD solution from MATH back to ENG model.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsITD._transform_solution_to_si!-Tuple{Any, Dict{String}}","page":"Internal Functions","title":"PowerModelsITD._transform_solution_to_si!","text":"function _transform_solution_to_si!(\n    result,\n    pmitd_data::Dict{String,<:Any};\n    make_si::Bool=true,\n    multinetwork::Bool=false\n)\n\nTransforms the PM and PMD solutions from per-unit (pu) to SI units, and the PMD solution from MATH back to ENG model.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"===","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerModelsITD","category":"page"},{"location":"index.html#What-is-PowerModelsITD?","page":"Introduction","title":"What is PowerModelsITD?","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsITD.jl is a Julia/JuMP-based package for modeling integrated transmission-distribution power networks.","category":"page"},{"location":"index.html#Resources-for-Getting-Started","page":"Introduction","title":"Resources for Getting Started","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Installation Guide.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Quickstart Guide.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the introductory tutorial Introduction to PowerModelsITD.","category":"page"},{"location":"index.html#How-the-documentation-is-structured","page":"Introduction","title":"How the documentation is structured","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The following is a high-level overview of how our documentation is structured. There are three primary sections:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The Manual contains detailed documentation for certain aspects of PowerModelsITD, such as the Data Models, the Network Formulations, or the Optimization Problem Specifications.\nTutorials contains working examples of how to use PowerModelsITD. Start here if you are new to PowerModelsITD.\nThe API Reference contains a complete list of the functions you can use in PowerModelsITD. Look here if you want to know how to use a particular function.","category":"page"},{"location":"index.html#Citing-PowerModelsITD","page":"Introduction","title":"Citing PowerModelsITD","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"If you find PowerModelsITD useful for your work, we kindly request that you cite the following [publication]:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"@article{powermodelsitdresearchpaper,\ntitle = \"Modeling and Rapid Prototyping of Integrated Transmission-Distribution OPF Formulations with PowerModelsITD.jl\",\njournal = \"In Submission Process\",\nvolume = \"\",\npages = \"\",\nyear = \"2022\",\nissn = \"\",\ndoi = \"\",\nurl = \"https://lanl-ansi.github.io/PowerModelsITD.jl/stable/index.html\",\nauthor = \"Juan Ospina and David M. Fobes and Russell Bent and Andreas W\\\"achter\",\nkeywords = \"Nonlinear optimization, Convex optimization, AC optimal power flow, Julia language, Open-source\",\nabstract = \"Conventional electric power systems are composed of different unidirectional power flow stages of generation transmission, and distribution, managed independently by transmission system and distribution system operators. However, as distribution systems increase in complexity due to the integration of distributed energy resources, coordination between transmission and distribution networks will be imperative for the optimal operation of the power grid. However, coupling models and formulations between transmission and distribution is non-trivial, in particular due to common practice of modeling transmission systems as single-phase, and distribution systems as multi-conductor phase-unbalanced. To enable the rapid prototyping of power flow formulations, in particular in the modeling of the boundary conditions between these two seemingly incompatible data models, we introduce PowerModelsITD.jl, a free, open-source toolkit written in Julia for integrated transmission-distribution (ITD) optimization that leverages mature optimization libraries from the InfrastructureModels.jl-ecosystem. The primary objective of the proposed framework is to provide baseline implementations of steady-state ITD optimization problems, while providing a common platform for the evaluation of emerging formulations and optimization problems. In this work, we introduce the nonlinear formulations currently supported in PowerModelsITD.jl, which include AC-polar, AC-rectangular, current-voltage, and a linear network transportation model. Results are validated using combinations of IEEE transmission and distribution networks.\"\n}","category":"page"},{"location":"index.html#Acknowledgments","page":"Introduction","title":"Acknowledgments","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This code has been developed with the support of the Grant: \"Optimized Resilience for Distribution and Transmission Systems\" funded by the U.S. Department of Energy (DOE) Office of Electricity (OE) Advanced Grid Modeling (AGM) Research Program under program manager Ali Ghassemian. The research work conducted at Los Alamos National Laboratory is done under the auspices of the National Nuclear Security Administration of the U.S. Department of Energy under Contract No. 89233218CNA000001. The primary developers are Juan Ospina (@juanjospina) and David Fobes (@pseudocubic).","category":"page"},{"location":"index.html#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This code is provided under a BSD license as part of the Multi-Infrastructure Control and Optimization Toolkit (MICOT) project, LA-CC-13-108.","category":"page"},{"location":"reference/constraints.html#ConstraintAPI","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"reference/constraints.html","page":"Constraints","title":"Constraints","text":"Modules = [PowerModelsITD]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"constraint\")","category":"page"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_current-Tuple{AbstractIVRPowerModelITD, Int64}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_current","text":"function constraint_boundary_current(\n    pmitd::AbstractIVRPowerModelITD,\n    i::Int;\n    nw::Int=nw_id_default\n)\n\nBoundary power constraints based on rectangular currents (I) for AbstractIVRPowerModelITD.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_power-Tuple{AbstractPowerModelITD, Int64}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_power","text":"function constraint_boundary_power(\n    pmitd::AbstractPowerModelITD,\n    i::Int;\n    nw::Int=nw_id_default\n)\n\nBoundary power constraints for AbstractPowerModelITD.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_power-Tuple{LPowerModelITD, Int64}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_power","text":"function constraint_boundary_power(\n    pmitd::LPowerModelITD,\n    i::Int;\n    nw::Int=nw_id_default\n)\n\nBoundary power constraints for LPowerModelITD (Linear versions - Active P only).\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{ACPPowerModel, ACPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.ACPPowerModel,\n    pmd::_PMD.ACPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nACP-ACPU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{ACPPowerModel, FOTPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.ACPPowerModel,\n    pmd::_PMD.FOTPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACP-FOTPU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{ACRPowerModel, ACRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.ACRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nACR-ACRU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{ACRPowerModel, FBSUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.FBSUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACR-FBSU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{ACRPowerModel, FOTRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.FOTRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACR-FOTRU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{AbstractPowerModelITD, Int64}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pmitd::AbstractPowerModelITD,\n    i::Int;\n    nw::Int=nw_id_default\n)\n\nGeneral voltage angle boundary constraint.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{DCPPowerModel, DCPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.DCPPowerModel,\n    pmd::_PMD.DCPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nDCP-DCPU boundary bus voltage angle constraints: DCP angle.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{IVRPowerModel, IVRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.IVRPowerModel,\n    pmd::_PMD.IVRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nIVR-IVRU boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{NFAPowerModel, NFAUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.NFAPowerModel,\n    pmd::_PMD.NFAUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nNFA-NFAU boundary bus voltage angle constraints: empty NFA angle.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractBFAModel, LPUBFDiagPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractBFAModel,\n    pmd::_PMD.LPUBFDiagPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nBFA-LinDist3FlowPowerModel boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractSDPWRMModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractSDPWRMModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSDPWRM-SOCConicUBF boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractSOCBFConicModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractSOCBFConicModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCBFConic-SOCUBFConic boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractSOCBFModel, LPUBFDiagPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractSOCBFModel,\n    pmd::_PMD.LPUBFDiagPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nSOCBF-LinDist3FlowPowerModel boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractSOCBFModel, SOCNLPUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractSOCBFModel,\n    pmd::_PMD.SOCNLPUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCBF-SOCNLUBF boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_angle-Tuple{PowerModels.AbstractSOCWRConicModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_angle","text":"function constraint_boundary_voltage_angle(\n    pm::_PM.AbstractSOCWRConicModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCWRConic-SOCConicUBF boundary bus voltage angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{ACPPowerModel, ACPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.ACPPowerModel,\n    pmd::_PMD.ACPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nACP-ACPU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{ACPPowerModel, FOTPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.ACPPowerModel,\n    pmd::_PMD.FOTPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACP-FOTPU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{ACRPowerModel, ACRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.ACRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nACR-ACRU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{ACRPowerModel, FBSUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.FBSUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACR-FBSU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{ACRPowerModel, FOTRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.ACRPowerModel,\n    pmd::_PMD.FOTRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nACR-FOTRU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{AbstractPowerModelITD, Int64}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pmitd::AbstractPowerModelITD,\n    i::Int;\n    nw::Int=nw_id_default\n)\n\nGeneral voltage magnitude boundary constraint.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{DCPPowerModel, DCPUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.DCPPowerModel,\n    pmd::_PMD.DCPUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nDCP-DCPU boundary bus voltage magnitude constraints: empty since DC keeps vm = 1 for all.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{IVRPowerModel, IVRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.IVRPowerModel,\n    pmd::_PMD.IVRUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nIVR-IVRU boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{NFAPowerModel, NFAUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.NFAPowerModel,\n    pmd::_PMD.NFAUPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nNFA-NFAU boundary bus voltage magnitude constraints: empty NFA.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractBFAModel, LPUBFDiagPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractBFAModel,\n    pmd::_PMD.LPUBFDiagPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nBFA-LinDist3FlowPowerModel boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractSDPWRMModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractSDPWRMModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSDPWRM-SOCConicUBF boundary bus voltage magnitude (W variables) constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractSOCBFConicModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractSOCBFConicModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCBFConic-SOCUBFConic boundary bus voltage magnitude (W variables) constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractSOCBFModel, LPUBFDiagPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractSOCBFModel,\n    pmd::_PMD.LPUBFDiagPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int=nw_id_default\n)\n\nSOCBF-LinDist3FlowPowerModel boundary bus voltage magnitude constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractSOCBFModel, SOCNLPUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractSOCBFModel,\n    pmd::_PMD.SOCNLPUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCBF-SOCNLUBF boundary bus voltage magnitude (W variables) constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_boundary_voltage_magnitude-Tuple{PowerModels.AbstractSOCWRConicModel, SOCConicUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsITD.constraint_boundary_voltage_magnitude","text":"function constraint_boundary_voltage_magnitude(\n    pm::_PM.AbstractSOCWRConicModel,\n    pmd::_PMD.SOCConicUBFPowerModel,\n    i::Int,\n    f_idx::Tuple{Int,Int,Int},\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    nw::Int = nw_id_default\n)\n\nSOCWRConic-SOCConicUBF boundary bus voltage magnitude (W variables) constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_current_balance-Tuple{AbstractPowerModelITD, PowerModelsDistribution.AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_current_balance","text":"function constraint_distribution_current_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.AbstractUnbalancedIVRModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nIVRU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_current_balance_boundary-Tuple{AbstractIVRPowerModelITD, Int64, Int64, Vector}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_current_balance_boundary","text":"function constraint_distribution_current_balance_boundary(\n    pmitd::AbstractIVRPowerModelITD,\n    i::Int,\n    j::Int,\n    boundary_buses::Vector;\n    nw_pmitd::Int=nw_id_default\n)\n\nGeneral current balance contraints for boundary buses in the distribution system-side.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractBFPowerModelITD, LPUBFDiagPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractBFPowerModelITD,\n    pmd::_PMD.LPUBFDiagPowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nLinDist3FlowPowerModel distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, FBSUBFPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.FBSUBFPowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nFBSU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, FOTPUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.FOTPUPowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nFOTPU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, FOTRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.FOTRUPowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nFOTRU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, PowerModelsDistribution.AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.AbstractUnbalancedACPModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nACPU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, PowerModelsDistribution.AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.AbstractUnbalancedACRModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nACRU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, PowerModelsDistribution.AbstractUnbalancedActivePowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.AbstractUnbalancedActivePowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nDCPU/NFAU distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance-Tuple{AbstractPowerModelITD, PowerModelsDistribution.AbstractUnbalancedWModels, Int64, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Vector{Tuple{Int64, Vector{Int64}}}, Any}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance","text":"function constraint_distribution_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pmd::_PMD.AbstractUnbalancedWModels,\n    n::Int,\n    j::Int,\n    i::Int,\n    terminals::Vector{Int},\n    grounded::Vector{Bool},\n    bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n    bus_gens::Vector{Tuple{Int,Vector{Int}}},\n    bus_storage::Vector{Tuple{Int,Vector{Int}}},\n    bus_loads::Vector{Tuple{Int,Vector{Int}}},\n    bus_shunts::Vector{Tuple{Int,Vector{Int}}},\n    bus_arcs_boundary_to\n)\n\nUnbalanced W models distribution constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_distribution_power_balance_boundary-Tuple{AbstractPowerModelITD, Int64, Int64, Vector}","page":"Constraints","title":"PowerModelsITD.constraint_distribution_power_balance_boundary","text":"function constraint_distribution_power_balance_boundary(\n    pmitd::AbstractPowerModelITD,\n    i::Int,\n    j::Int,\n    boundary_buses::Vector;\n    nw_pmitd::Int=nw_id_default\n)\n\nGeneral power balance contraints for boundary buses in the distribution system-side.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_current_balance-Tuple{AbstractPowerModelITD, PowerModels.AbstractIVRModel, Int64, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_current_balance","text":"function constraint_transmission_current_balance(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractIVRModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    bus_arcs,\n    bus_arcs_dc,\n    bus_gens,\n    bus_pd,\n    bus_qd,\n    bus_gs,\n    bus_bs,\n    bus_arcs_boundary_from\n)\n\nIVR transmission constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_current_balance_boundary-Tuple{AbstractIVRPowerModelITD, Int64, Int64, Vector}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_current_balance_boundary","text":"function constraint_transmission_current_balance_boundary(\n    pmitd::AbstractIVRPowerModelITD,\n    i::Int,\n    j::Int,\n    boundary_buses::Vector;\n    nw_pmitd::Int=nw_id_default\n)\n\nGeneral current balance contraints for boundary buses in the transmission system-side.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_power_balance-Tuple{AbstractPowerModelITD, PowerModels.AbstractACPModel, Int64, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_power_balance","text":"function constraint_transmission_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractACPModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    bus_arcs,\n    bus_arcs_dc,\n    bus_arcs_sw,\n    bus_gens,\n    bus_storage,\n    bus_pd,\n    bus_qd,\n    bus_gs,\n    bus_bs,\n    bus_arcs_boundary_from\n)\n\nACP transmission constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_power_balance-Tuple{AbstractPowerModelITD, PowerModels.AbstractACRModel, Int64, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_power_balance","text":"function constraint_transmission_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractACRModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    bus_arcs,\n    bus_arcs_dc,\n    bus_arcs_sw,\n    bus_gens,\n    bus_storage,\n    bus_pd,\n    bus_qd,\n    bus_gs,\n    bus_bs,\n    bus_arcs_boundary_from\n)\n\nACR transmission constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_power_balance-Tuple{AbstractPowerModelITD, PowerModels.AbstractActivePowerModel, Int64, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_power_balance","text":"function constraint_transmission_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractActivePowerModel,\n    n::Int,\n    j::Int,\n    i::Int,\n    bus_arcs,\n    bus_arcs_dc,\n    bus_arcs_sw,\n    bus_gens,\n    bus_storage,\n    bus_pd,\n    bus_qd,\n    bus_gs,\n    bus_bs,\n    bus_arcs_boundary_from\n)\n\nDCP/NFA transmission constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_power_balance-Tuple{AbstractPowerModelITD, Union{PowerModels.AbstractACTModel, PowerModels.AbstractBFModel, PowerModels.AbstractWRConicModel, PowerModels.AbstractWRMModel, PowerModels.AbstractWRModel}, Int64, Int64, Int64, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_power_balance","text":"function constraint_transmission_power_balance(\n    pmitd::AbstractPowerModelITD,\n    pm::_PM.AbstractWModels,\n    n::Int,\n    j::Int,\n    i::Int,\n    bus_arcs,\n    bus_arcs_dc,\n    bus_arcs_sw,\n    bus_gens,\n    bus_storage,\n    bus_pd,\n    bus_qd,\n    bus_gs,\n    bus_bs,\n    bus_arcs_boundary_from\n)\n\nW Models (e.g., SOCBF) transmission constraint power balance.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsITD.constraint_transmission_power_balance_boundary-Tuple{AbstractPowerModelITD, Int64, Int64, Vector}","page":"Constraints","title":"PowerModelsITD.constraint_transmission_power_balance_boundary","text":"function constraint_transmission_power_balance_boundary(\n    pmitd::AbstractPowerModelITD,\n    i::Int,\n    j::Int,\n    boundary_buses::Vector;\n    nw_pmitd::Int=nw_id_default\n)\n\nGeneral power balance contraints for boundary buses in the transmission system-side.\n\n\n\n\n\n","category":"method"}]
}
